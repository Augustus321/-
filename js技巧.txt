正则表达式匹配返回相应字段
	let a = //.exec()

正则表达式判断真假
	let a = //.test()

回到上一页
	window.history.back(-1)

关闭当前页
	window.opener=null;
	window.open('','_self')
	window.close();

获取history数量
	window.history.length

修改元素样式
	document.querySelector('.a').style.setProperty('display','block')

获取元素data
	var div = document.getElementById("myDiv");
	var appId = div.dataset.appid;//获取data-appid的值

取整
	向上取整
	Math.ceil()
	只保留整数
	parseInt()
	向下取整
	Math.floor()
	四舍五入
	Math.round()

绝对值
	Math.abs()

返回两数中的较大者
	Math.max(1,2)
较小者
	Math.min(1,2)

随机数
	Math.random()

过滤数组
	var a = aa.filter(function(item){
		return item!=undefined;
	})

删除数组第一个元素
	arr.shift()

保留两位小数
	var num = 12.3456
	num.toFixed(2)

全局获取function修改的值
	var a = ''
	function aa(){
		return a = 1
	}
	a = aa()

switch case语句
	switch(表达式) {
    		 case n:
       		 	代码块
        			break;
     		case n:
        			代码块
        			break;
     		default:
       		 	默认代码块
	} 

使用md5加密
	在html中引入md5.js
	在js中使用：hex_md5('aaaa')

只能输入数字
	if(val!=''&& isNaN(val)){
            		$(this).val('');
            		return
        	}

阻止a标签跳转
	<a href="aaa.html" onclick="return aa()">aaa</a>
	function aa(){
		var flag = false
		return flag
	}

window.open
	弹出新窗口
	window.open ('page.html', 'newwindow', 'height=100, width=400, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=n o, status=no') 
	参数：
	弹出窗口的文件名
	'page.html'
	弹出窗口的名字（不是文件名），非必须，可用空''代替
	'newwindow'
	窗口高度
	height=100
	窗口宽度
	width=400
	窗口距离屏幕上方的像素值
	top=0
	窗口距离屏幕左侧的像素值
	left=0
	是否显示工具栏，yes为显示
	toolbar=no
	菜单栏和滚动栏
	menubar,scrollbars
	是否允许改变窗口大小，yes为允许
	resizable=no
	是否显示地址栏，yes为允许
	location=no
	是否显示状态栏内的信息（通常是文件已经打开），yes为允许

获取url
	window.location.href
	获取url参数
	function getUrlParam(name) {
        	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)"); //构造一个含有目标参数的正则表达式对象
        	var r = window.location.search.substr(1).match(reg);  //匹配目标参数
        	if (r != null) return unescape(r[2]); return null; //返回参数值
    	}
	var a = getUrlParam('type')
	//参数为中文时会出现乱码的情况
	将代码中的unescape替换为decodeURI即可

获取窗口大小
	document.documentElement.clientWidth
	document.documentElement.clientHeight

监听窗口变化
	window.onresize = function(){}

转码
	中文转utf-8
	(中文).replace(/[^\u0000-\u00FF]/g,function($0){return escape($0).replace(/(%u)(\w{4})/gi,"&#x$2;")});
	utf-8转中文
	unescape((UTF-8).replace(/&#x/g,'%u').replace(/\\u/g,'%u').replace(/;/g,''));

创建节点并插入
	var a = document.createElement('p');
	a.className = 'aa'
	a.innerHTML = 'aaaa'
	document.body.appendChild(a)

自动触发事件
	a.focus() //自动获取焦点
	a.click() //自动触发点击事件

获取元素宽高
	document.getElementById("div").offsetHeight
	document.getElementById("div").offsetWidth
	document.getElementById("div").offsetLeft //元素的实际距离左边界的距离
	document.getElementById("div").offsetTop //元素的实际距离上边界的距离

获取时间
var date = new Date();


date.getFullYear();  // 获取完整的年份(4位,1970)

date.getMonth();  // 获取月份(0-11,0代表1月,用的时候记得加上1)

date.getDate();  // 获取日(1-31)

date.getTime();  // 获取时间(从1970.1.1开始的毫秒数)

date.getHours();  // 获取小时数(0-23)

date.getMinutes();  // 获取分钟数(0-59)

date.getSeconds();  // 获取秒数(0-59)


//时间的样式可以自行 随意拼接

转换后台专递的时间戳
function GetDateFormat(str) {
return new Date(parseInt(str.substr(6, 13))).toLocaleDateString();
}

GetDateFormat（’/Date(1354116249000)/ ‘）―> 2017/1/1

自动刷新页面
window.location.reload()

获取最后一个特定字符之后的字符串
var str = '/aa/aa/aaaaaaa/'
var index = str.lastIndexOf('/')
str = str.substring(index+1,str.length)

只能输入数字
onkeyup="value=value.replace(/\D/g,'')"
在标签里添加

打开js文件乱码时可以用记事本打开js文件，并另存为以utf-8编码的js文件

反转义
	function HTMLDecode(text) {
            var temp = document.createElement("div");
            temp.innerHTML = text;
            var output = temp.innerText || temp.textContent;
            temp = null;
            return output;
        }

获取元素文本
document.getElementById('a').textContent

替换字符串中所有匹配的文字
	//固定文字
	str.replace(/abc/g,'')
	//变量文字
	var regex = abc[i];
	str = str.replace(new RegExp(regex,'g'),'')


复制文本
	var num = 'aasdasd' //获取需要复制的内容
        var a = document.createElement('input');
        a.className = 'aa'
        document.body.appendChild(a)
        a.value = num; // 修改文本框的内容
        a.select(); 
        document.execCommand("copy");
        a.remove()

判断一个数为整数
Number.isInteger(3) //ES6

字符串排列所有情况
	function bb(a,ab){

    		if(a.length == len){

    			res.push(a.join(','))

    			return

    		}

    		ab.forEach((item,index) => {

        		var tt = [].concat(ab)

        		tt.splice(index,1)

        		bb(a.concat(item),tt)

    		})
}

判断obj是否为空
	JSON.stringify(data) === '{}'
	Object.keys(obj).length <= 0  //ES6


判断obj中是否有想要的属性
	obj.hasOwnProperty("a")

匹配数组中的某个对象并删除
	newArr.forEach((item,index,array)=>{


		if(item.name =='已办结'){


			array.splice(index,1)


		}
	})


字符大于11删除
	if(val.length > 11){
		val = val.substring(0,11)
	}

删除对象中的某个属性
	delete obj[key]

判断数据类型
	typeof('abc')  //'string' 注意：Array,null和Object类型都会返回Object
	({}) instanceof Object  //true
	({}).consturctor === Object //true
	Array.isArray([1,2,3]) //true
	Object.prototype.toString.call(arr) //'[object Array]'

注解
	使用 /** */ 包起来，可以在使用的时候知道怎么用
	@param 描述参数的信息

	/**
	*@param {string} a 函数中的参数
	*/
	function abc(a){}
	//鼠标移到 a 上面就可以看见这个参数的描述和类型

判断数组中是否有某个值
	// indexOf 返回元素下标或-1
	arr.indexOf(2)
	// includes 返回true或false
	arr.includes(2) ? console.log("存在") : console.log("不存在")