创建类的方法
         //创建一个Person类
        class Person {
            //构造器方法
            constructor(name,age){
                //构造器中的this是谁？—— 类的实例对象
                this.name = name
                this.age = age
            }
            //一般方法
            speak(){
                //speak方法放在了哪里？—— 类的原型对象上，供实例使用
                //通过Person实例调用speak时，speak中的this就是Person实例
                console.log(`我叫${this.name}，我年龄是${this.age}`)
            }
            //类中可以直接写赋值语句，如下代码的含义是：给Car的实例对象添加一个属性，名为a，值为1
            a = 1
            
            //给类添加属性
            static demo = 100
        }

        //创建一个Person的实例对象
        const p1 = new Person('tom',18)
        console.log(p1) //Person {a: 1, name: 'tom', age: 18}
        p1.speak() //我叫tom，我年龄是18
       console.log(p1.demo) //undefined

        //创建一个Student类，继承于Person类
        class Student extends Person{
            constructor(name,age,grade){
	//super中的参数可直接使用Person中对这些参数的操作，不写会出现错误
                super(name,age)
                this.grade = grade
            }
            speak(){
                console.log(`我叫${this.name}，我年龄是${this.age}，我读的是${this.grade}年级`)
            }
            study(){
                //study方法放在了哪里？—— 类的原型对象上，供实例使用
                //通过Student实例调用study时，study中的this就是Student实例
                console.log('我很努力地学习')
            }
        }
        const s1 = new Student('小张',15,'高一')
        console.log(s1)
        s1.speak()
        s1.study()

        /*
            总结：
                1.类中的构造器不是必须写的，要对实例进行一些初始化的操作，如添加指定属性时才用。
                2.如果A类继承了B类，且A类中写了构造器，那么A类构造其中的super是必须要调用的。
                3.类中所定义的方法，都是放在了类的原型对象上，供实例去使用
        */

类中方法this指向
*类中局部自动使用严格模式*
class Person{
            constructor(name,age){
                this.name = name
                this.age = age
            }
            study(){
                //study方法放在了哪里？—— 类的原型对象上，供实例使用
                //通过Person实例调用study时，study中的this就是Person实例
                console.log(this)
            }
        }
        const p1 = new Person('tom',18)
        p1.study()//this指向Person实例
        const x = p1.study
        x()//this为undefined
        //x是直接调用并且类中局部默认为严格模式，所以this为undefined

