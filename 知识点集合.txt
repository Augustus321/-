key的使用
	1.虚拟DOM中key的作用：
                    1). 简单的说：key是虚拟DOM对象的标识，在更新显示时key起着极其重要的作用。

                    2). 详细的说：当状态中的数据发生变化时，react会根据【新数据】生成【新的虚拟DOM】，随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：

                            a.旧虚拟DOM中找到了与新虚拟DOM相同的key：
                                (1).若虚拟DOM中内容没变，直接使用之前的真实DOM
                                (2).若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM
                            
                            b.旧虚拟DOM中未找到与新虚拟DOM相同的key
                                根据数据创建新的真实DOM，随后渲染到页面

                2.用index作为key可能会引发的问题：
                    1.若对数据进行：逆序添加、逆序删除等破坏顺序操作：
                            会产生没有必要的真实DOM更新 ===> 界面效果没问题，但效率低。

                    2.如果结构中还包含输入类的DOM：
                            会产生错误DOM更新 ===> 界面有问题。
                    
                    3.注意！如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，
                        仅用于渲染列表用于展示，使用index作为key是没有问题的。

                3.开发中如何选择key？：
                    1.最好使用每条数据的唯一标识作为key，比如：id、手机号、身份证号、学号等唯一值。
                    2.如果确定只是简单的展示数据，用index也是可以的。

SPA的理解
	1.单页Web应用（single page web application，SPA）。
	2.整个应用只有一个完整的页面。
	3.点击页面中的链接不会刷新页面，只会做页面的局部更新。
	4.数据都需要通过ajax请求获取, 并在前端异步展现。

路由的理解
	1.什么是路由?
		1.一个路由就是一个映射关系(key:value)
		2.key为路径, value可能是function或component
	2.路由分类
		1.后端路由：
			1)理解： value是function, 用来处理客户端提交的请求。
			2)注册路由： router.get(path, function(req, res))
			3)工作过程：当node接收到一个请求时, 根据请求路径找到匹配的路由, 调用路由中的函数来处理请求, 返回响应数据
		2.前端路由：
			1)浏览器端路由，value是component，用于展示页面内容。
			2)注册路由: <Route path="/test" component={Test}>
			3)工作过程：当浏览器的path变为/test时, 当前路由组件就会变为Test组件

高阶函数：
	如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。
                    1.若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。
                    2.若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。
                    常见的高阶函数有：Promise、setTimeout、arr.map()等等

函数的柯里化：
	通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。
                function sum(a){
                    return (b)=>{
                        return (c)=>{
                            return a+b+c
                        }
                    }
                }
                const result = sum(1)(2)(3)
                console.log(result)

