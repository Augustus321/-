引入persistedstate   npm install --save vuex-persistedstate

在项目的根目录下新建一个store文件夹，然后在文件夹下新建一个index.js文件
	//引入vue和vuex
	import Vue from 'vue'
	import Vuex from 'vuex'
	import createPersistedState from 'vuex-persistedstate'
	Vue.use(Vuex)

	const vuexPersisted = new createPersistedState({
		storge:{
			getItem: key => uni.getStorageSync(key),
			setItem: (key,value) => uni.setStorageSync(key,value),
			removeItem: key => uni.removeStorageSync(key)
		}
	})
	const store = new Vuex.Store({ //全局变量定义
		state: {
			/*
				状态存储的地方
			*/
			forcedLogin: false, //是否需要强制登录
			hasLogin: false,
			userinfo:'',
		},
		mutations: {
			/*
				更改 store 中的状态，必须是同步执行
			*/
			login(state, user) {
				state.hasLogin = true;
				state.userinfo = user || '';
			},
			logout(state) {
				state.hasLogin = false;
				state.userinfo = '';
			},
			forced(state,boolean){
				state.forcedLogin = boolean
			}
		},
		actions:{
			/*
				当需要用到异步提交 mutation 时，可以用到（不是直接更改状态）
			*/
			aaa(context){
				context.commit('login')
			},
			abc({commit,dispatch,state},bb){
				dispatch('aaa')
				commit('login',bb)
			}
		},
		getters:{
			/*
				需要用到 state 中派生的一些状态时，可使用
			*/
			ggg(state){
				return state.count + 2
			},
			gbc(state,getters){
				return getters.ggg + 2
			},
			garr:(state) => (id) => {
				return state.userId == id
			}
		}
		plugins:[vuexPersisted]
	})
	export default store

在main注册
	import store from './store'
	Vue.prototype.$store = store
	const app = new Vue（{
		...App,
		store
	})

在页面中使用
	方法一：
	import { mapState,mapMutations,mapActions,mapGetters } from 'vuex'

	computed:{...mapState(['aa']),...mapGetters(['gbc','garr'])} //使用存储的变量
	methods:{...mapMutations(['bc']),...mapActions(['aaa'])} //使用mutations的方法

	this.aa   this.bc(10)  this.aaa()  this.gbc  this.garr(2)

	方法二：
		this.$store.state.aa
		this.$store.commit("bc",10)
		this.$store.dispatch('aaa')
		this.$store.getters.gbc
		thsi.$store.getters.garr(2)

将mapState和mapMutaions全局混入（不用每个页面都引入mapState和mapMutaions）

	在store文件夹下创建vuex.mixin.js
	/***
 		* vuex的全局mixin,免去在组件或页面中从vuex中引入 mapState和mapMutations
 		* 在页面或组件中修改store的状态时，调用方法 eg： 
 		*  this.$vuex('mutation', value); // 第一个参数是mutation的方法名，第二个参数是数据
 	***/

	import { mapState, mapMutations } from "vuex";
	import store from "@/store";

	//获取sotre中的所有state
	let $vuexStoreKey = [];
	try {
  		$vuexStoreKey = store.state ? Object.keys(store.state) : [];
	} catch (error) {}

	module.exports = {
  		// 创建时将更新状态方法挂载在$vuex中
  		/**
   			* @param mutation - store中的方法
   			* @param value - 要修改的值
   		* */

  		created() {
    			this.$vuex = (mutation, value) => {
      				this.$store.commit(mutation, value);
    			};
  		},
  		computed: {
			//将所有state解构到全局混入的mixin中
    			...mapState($vuexStoreKey),
  		}
	};
	
	在main.js中引入
	//引入vuex
	import store from '@/store'
	import vuexStore from '@/store/vuex.mixin.js'
	Vue.mixin(vuexStore)


登录案例
	store/index.js
	//引入vue和vuex
	import Vue from 'vue'
	import Vuex from 'vuex'
	import createPersistedState from 'vuex-persistedstate'
	Vue.use(Vuex)

	const vuexPersisted = new createPersistedState({
		storge:{
			getItem: key => uni.getStorageSync(key),
			setItem: (key,value) => uni.setStorageSync(key,value),
			removeItem: key => uni.removeStorageSync(key)
		}
	})
	const store = new Vuex.Store({ //全局变量定义
		state: {
			forcedLogin: false, //是否需要强制登录
			hasLogin: false,
			userinfo:'',
		},
		mutations: {
			login(state, user) {
				state.hasLogin = true;
				state.userinfo = user || '';
			},
			logout(state) {
				state.hasLogin = false;
				state.userinfo = '';
			},
			forced(state,boolean){
				state.forcedLogin = boolean
			}
		},
		plugins:[vuexPersisted]
	})
	export default store

	main.js
	import store from './store'
	Vue.prototype.$store = store
	Vue.prototpye.isLogin = function(hasforced){
		if(!store.state.hasLogin){
			//判断是否需要强制登录，是need，否noneed
			if(hasforced == 'need'){
				store.commit('forced', false)
			}else{
				store.commit('forced', true)
			}
			uni.showModal({
				title:'未登录',
				content:'您未登录，需要登录后才能继续',
				showCancel:store.state.forcedLogin,
				success: (res) => {
					if(res.confirm){
						if(!store.state.forcedLogin){
							uni.reLaunch({
								url:'/pages/login/login'
							})
						} else {
							uni.navigateTo({
								url:'/pages/login/login'
							})
						}
					}
				}
			})
		}
	}

	const app = new Vue（{
		...App,
		store
	})

	index.vue
	import { mapState,mapMutations } from 'vuex'

	computed:mapState(['aa'] //使用存储的变量
	methods:{...mapMutations(['bc'])} //使用mutations的方法

	// 判断登录
	if (this.isLogin('need') && JSON.stringify(this.userinfo) != '{}') {
		this.getInfo()
	}

	login.vue
	uni.request({
		url: baseurl + '/api/user/mobilelogin',
		method: 'POST',
		header: {
			"Content-Type": "application/json"
		},
		data: {
			mobile: phone,
			captcha: code
		},
		success: (res) => {
			uni.hideLoading()
			const result = res.data
			if (result.code == 0) {
				this.$refs.uToast.show({
					message: result.msg,
					type: 'error',
					duration: 1000
				})
			} else if (result.code == 1) {
				this.$refs.uToast.show({
					message: result.msg,
					type: 'success',
					duration: 1000
				})
				this.login(result.data.userinfo);
				if (!this.forcedLogin) {
					uni.reLaunch({
						url: '/pages/index/index'
					})
				} else {
					uni.navigateBack()
				}
			}
		}
	})



使用persistedstate时转小程序会出现报错
	下载 npm i mp-storage --save
	引入 import { localStorage } from 'mp-storage'
	直接将plugins改成下面代码
	plugins: [
	    createPersistedState({
	      storage: localStorage
	    })
	  ]

在方法里修改数组无法动态更新
	要使用$set
	this.$set(arr,index,value)
